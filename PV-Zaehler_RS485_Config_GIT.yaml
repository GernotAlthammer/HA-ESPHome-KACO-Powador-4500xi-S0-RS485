### 2023-03-17 Initital Configuration S0 Interface for KACO Powador 2500ix and 4500ix Inverters
### Onboard-LED an GPIO2 # D4
### Stromzähler 1 an GPIO5 # D1
### Stromzähler 2 an GPIO4 # D2
### Temperatur und Feuchte Sensor DHT11 an GPIO14 # D5
### 2023-05-05 Update ESP-Version 2023.4.4
### 2023-05-29 Update ESP-Version 2023.5.5, added alternative WLAN-2 SSID
### 2023-06-17 Added VCC voltage sensor
### 2023-07-03 Remove the filte for the counting of the pulses
### 2023-07-14 Added data retrieval from Inverter 1 and 2 via RS485 interface on UART GPIO1+3
### Für RS485: Hardware Serial TX = GPIO1/TXD RX= GPIO3/RXD wird verwendet
### 2023-07-17 Replace Daily Energy counters 1+2  with Inverter reported Energy values 1+2
### 2023-07-20 Change S0 counter to 1000 pulse per kW
### 2023-08-05 Change pulse meter internal_filter to 20ms
### 2024-02-11 Added Web Server + enabled CPU with 160 MHz
### 2024-04-23_A Added timeout to pulse counters
### 2024-04-23_B Added filer clamp to ignore S0 pulse counts outside of defined min/max
### 2024-05-05 Added Power Efficency sensor for Inverter 1 an 2
### 2024-06-29 Update OTA for ESPhome V6
### 2024-07-13 Status-Texte korrigiert
### 2024-09-28 Sscanf gekürzt um ZustandText
### 2025-03-08 Revoved Custom Component for uart_read_line_sensor.h
### 2025-03-09 Correction of UART configuration to recieve value messages
###
esphome:
  name: pv-s0-zaehler1
  comment: "KACO Powador 2500ix 4500ix Inverter (S0 + RS485)"

  project:
    name: "ESP8266.KACO Powador Inverter"
    version: "1.0"

  #platformio_options:
  #  # Change CPU speed from 80 MHz to 160 MHz
  #  board_build.f_cpu: 160000000L
  #includes:
  #  - uart_read_line_sensor.h

esp8266:
  board: esp01_1m


# enabel Web Server Interface
#web_server:
#  port: 80
#  version: 2
#  log: false
#  auth:
#    username: "pv-s0-zaehler1"
#    password: !secret web_server_password


#### Enable logging
logger:
  baud_rate: 0     # Disable UART logging if the UART0 pins GPIO1/3 are used for RS232 communication
  #level: VERBOSE
  #level: VERY_VERBOSE


# Enable Home Assistant API
api:
  encryption:
    key: "YOURKEY"
  # Über API auf die Serielle Schnittstelle RS485 schreiben ###
  services:
    - service: write_pv_rs485
      variables:
        command_rs485: string
      then:
        if: 
          condition: ## Check if RS485 Write command is ongoing
            binary_sensor.is_off: rs485_write
          then:
          - logger.log: "API-Command RS485 Write"
          - binary_sensor.template.publish:
              id: rs485_write
              state: ON
          - uart.write:
              id: pvz_rs485_uart
              data: !lambda |-
                std::string str = command_rs485;
                std::vector<uint8_t> vec(str.begin(), str.end());
                return vec;
          ## Wait minimum 1 sec between the commands to the Inverters
          - logger.log: "API-Command Delay 1.5 sec"
          - delay: 1.5sec
          - binary_sensor.template.publish:
              id: rs485_write
              state: OFF
          else:
          - logger.log: "Other RS485 Write is ongoing" 
  

#### Over The Air ################################################
ota:
  platform: esphome
  password: "85953d7fd33ee67e31ffa1dcdc3287b4"


#### WiFi Setup ##################################################
wifi:
  power_save_mode: none
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  ## Optional second WiFi network
  #- ssid: !secret wifi_ssid_2
  #  password: !secret wifi_password_2

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "PV-S0-Zaehler1 Fallback Hotspot"
    password: "YOUR-AP-PASSWORD"

captive_portal:



#### INTERVAL ####################################################
interval:
  ### Check Wifi-Status every 60 seconds and turn on the BLUE Onboard-LED
  - interval: 60s
    then:
      - if:
          # Check if the WiFi is connected
          condition:
            wifi.connected:
          then:
            if:
              # Check if LED is OFF
              condition:
                light.is_off: blue_led
              # Turn ON the BLUE Onboard LED 
              then:
                - light.turn_on: blue_led
          # When the WiFi is disconnected
          else:
            if:
              # Cheeck if LED is ON
              condition:
                light.is_on: blue_led
              # Turn OFF the BLUE Onboard LED
              then:
                - light.turn_off: blue_led
  
  ### Check Inverter Values 60 seconds
  - interval: 60s
    then:
      - if: 
          condition: ## Check if RS485 Write command is ongoing
            binary_sensor.is_on: rs485_write
          then:
            - logger.log: "Inerval Delay 2.0 sec" 
            - delay: 2sec
      - if: 
          condition: ## Check if RS485 Write command is ongoing
            binary_sensor.is_off: rs485_write
          then:
            - binary_sensor.template.publish:
                id: rs485_write
                state: ON
            ## Send to Inverter #1 
            - uart.write:
                id: pvz_rs485_uart
                #data: [0x23, 0x30, 0x31, 0x30, 0x0D]
                data: "#010\r"
            ## Wait minimum 1 sec between the commands to the Inverters
            - logger.log: "Inerval Delay 2.0 sec" 
            - delay: 2sec
            ## Send to Inverter #2 
            - uart.write: 
                id: pvz_rs485_uart
                #data: [0x23, 0x30, 0x32, 0x30, 0x0D]
                data: "#020\r"
            ## Wait minimum 1 sec between the commands to the Inverters
            - logger.log: "Inerval Delay 2.0 sec"
            - delay: 2sec
            - binary_sensor.template.publish:
                id: rs485_write
                state: OFF
 

#### UART ########################################################
#### Serielle Schnittstelle UART übe GPIOs #######################
#### Hardware Serial TX = GPIO1/TXD RX= GPIO3/RXD --> wird verwendet
#### Software Serial TX = GPIO5/D1 RX= GPIO4/D2
uart:
  id: pvz_rs485_uart
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600
  data_bits: 8
  parity: NONE
  stop_bits: 1
  #rx_buffer_size: 512 # Default is buffer size is 256 
  #newline: "\r\n"
  debug:
    #direction: TX # zum Auslesen der Daten vom PV-Controller
    #direction: BOTH # nur zu Debugging-Zwecken
    dummy_receiver: true
    after:
      #timeout: 250ms
      delimiter: "\n"

    sequence:
      # - lambda: UARTDebug::log_string(direction, bytes);  //Still log the data
      # - lambda: UARTDebug::log_hex(direction, bytes, ':');
      # - lambda: UARTDebug::log_int(direction, bytes, ',');
      # - lambda: UARTDebug::log_binary(direction, bytes, ';');
      - lambda: |-
          UARTDebug::log_string(direction, bytes);  //Still log the data
                   
          //Example to convert uart text to string
          std::string str(bytes.begin(), bytes.end());

          //watch for potential problems with non printable or special characters in string
          id(rawString).publish_state(str.c_str());




#### BINÄRE SENSOREN #############################################
binary_sensor:
  - platform: status
    name: "PV-Zaehler WiFi Status"

  - platform: template
    id: rs485_write
    internal: true
    publish_initial_state: false


#### STATUS-LED ##################################################
output:
  # BLUE Onboard-LED an GPIO2 # D4 ansteuern
  - platform: esp8266_pwm
    id: onboard_led
    pin:
      number: GPIO2 # D4
      inverted: true

light:
 - platform: monochromatic
   name: "Onboard LED"
   output: onboard_led
   id: blue_led


#### SENSOR ######################################################
sensor:
  ### WiFi Sensorem
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: Sensor PV-Zaehler WiFi Signal
    id: pvz_wifi_strength
    update_interval: 60s
    entity_category: "diagnostic"
    
  - platform: copy # Reports the WiFi signal strength in %
    source_id: pvz_wifi_strength
    name: "PV-Zaehler WiFi Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

  # Versorgugsspannung messen
  - platform: adc
    pin: VCC
    name: "PV-Zaehler VCC Spannung"
    id: pvz_vcc_spannung
    entity_category: "diagnostic"


# Stromzähler 1 (an GPIO5 # D1 ) als Pulse Meter
  - platform: pulse_meter
    name: "PV pulse 1"
    id: PV_pulse_1
    pin:
      number: GPIO5 # D1
      mode: INPUT_PULLUP
    unit_of_measurement: "kW"
    device_class: power
    internal_filter: 20ms
    accuracy_decimals: 3
    filters:
      # Filter outliers
      - max:
          window_size: 7
          send_every: 4
          send_first_at: 3  # default is 1
      # Convert pulses/min to kW bei 1000 Imp/kWh --> 0.06
      - multiply: 0.06
      # Publish 0 if no new values have been received for 5 minutes
      - timeout:
          timeout: 300s
          value: 0.0
      - clamp:
          min_value: 0.00
          max_value: 5.50  # Max Output Power of Model 5000xi is 5 kW + 10%
          ignore_out_of_range: true

#    total:
#      name: "PV-Energy 1"
#      unit_of_measurement: "kWh"
#      id: PV_Energy_1
#      device_class: energy
#      accuracy_decimals: 3
#      filters:
#        - multiply: 0.001
  
# Stromzähler 2 (an GPIO4 # D2 ) als Pulse Meter
  - platform: pulse_meter
    name: "PV pulse 2"
    id: PV_pulse_2
    pin:
      number: GPIO4
      mode: INPUT_PULLUP
    unit_of_measurement: "kW"
    device_class: power
    internal_filter: 20ms
    accuracy_decimals: 3
    filters:
      # Filter outliers
      - max:
          window_size: 7
          send_every: 4
          send_first_at: 3  # default is 1
      # Convert pulses/min to kW bei 1000 Imp/kWh --> 0.06
      - multiply: 0.06
      # Publish 0 if no new values have been received for 5 minutes
      - timeout:
          timeout: 300s
          value: 0.0
      - clamp:
          min_value: 0.00
          max_value: 5.50  # Max Output Power of Model 5000xi is 5 kW + 10%
          ignore_out_of_range: true

#    total:
#      name: "PV-Energy 2"
#      unit_of_measurement: "kWh"
#      id: PV_Energy_2
#      device_class: energy
#      accuracy_decimals: 3
#      filters:
#        - multiply: 0.001

#### Temperatur und Feuchte Sensor DHT11 an GPIO14 # D5
  - platform: dht
    pin:
      number: GPIO14 # D5
      mode: INPUT_PULLUP
    temperature:
      name: Temperatur Garage
      id: garage_temperatur
      filters:
          - filter_out: nan
          - heartbeat: 15s
          - sliding_window_moving_average:
             window_size: 2
             send_every: 2
             send_first_at: 1
      unit_of_measurement: "°C"
    humidity:
      name: Feuchte Garage
      id: garage_luftfeuchtigkeit
      filters:
        - filter_out: nan
        - heartbeat: 15s
        - sliding_window_moving_average:
            window_size: 2
            send_every: 2
            send_first_at: 1
      accuracy_decimals: 1 # humidity gets 0 decimals by default
    model: DHT11
    update_interval: 60s

### Vom Sensor DHT11 abgeleitete Absolute Feuchte 2023-03-17
  - platform: absolute_humidity
    name: "Feuchte Garage Absolut"
    id: garage_feuchte_absolut
    temperature: garage_temperatur
    humidity: garage_luftfeuchtigkeit



  ### PV-Zaehler 1 Sensor-Werte
  - platform: template
    name: "Inverter 1 State"
    id: inv_1_state
    #unit_of_measurement: ""
    accuracy_decimals: 0
    icon: "mdi:numeric"
    entity_category: "diagnostic"
  - platform: template
    name: "Inverter 1 Generator Voltage"
    id: inv_1_generator_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    icon: "mdi:flash"
    device_class: voltage
    state_class: measurement
  - platform: template
    name: "Inverter 1 Generator Current"
    id: inv_1_generator_current
    unit_of_measurement: "A"
    accuracy_decimals: 2
    icon: "mdi:flash"
    device_class: current
    state_class: measurement
  - platform: template
    name: "Inverter 1 Generator Power"
    id: inv_1_generator_power
    unit_of_measurement: "W"
    accuracy_decimals: 0
    icon: "mdi:flash"
    device_class: power
    state_class: measurement
  - platform: template
    name: "Inverter 1 Grid Voltage"
    id: inv_1_grid_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    icon: "mdi:flash"
    device_class: voltage
    state_class: measurement
  - platform: template
    name: "Inverter 1 Grid Current"
    id: inv_1_grid_current
    unit_of_measurement: "A"
    accuracy_decimals: 2
    icon: "mdi:flash"
    device_class: current
    state_class: measurement
  - platform: template
    name: "Inverter 1 Supplied Power"
    id: inv_1_supplied_power
    unit_of_measurement: "W"
    accuracy_decimals: 0
    icon: "mdi:flash"
    device_class: power
    state_class: measurement
  - platform: template
    name: "Inverter 1 Device Temperature"
    id: inv_1_device_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    icon: "mdi:thermometer"
    device_class: temperature
    state_class: measurement
  - platform: template
    name: "Inverter 1 Daily Energy"
    id: inv_1_daily_energy
    unit_of_measurement: "Wh"
    accuracy_decimals: 0
    icon: "mdi:flash"
    device_class: energy
    state_class: total_increasing
  - platform: template
    name: "Inverter 1 Efficiency"
    id: inv_1_efficiency
    unit_of_measurement: '%'
    lambda: |-
      if (id(inv_1_supplied_power).state == 0.0 || id(inv_1_generator_power).state == 0.0) {
        return {};
      } else {
        return (id(inv_1_supplied_power).state / id(inv_1_generator_power).state) * 100.0;
      }


  ### Ersatz für bisherigen Pulse Counter Sensor
  - platform: template
    name: "PV-Energy 1"
    unit_of_measurement: "Wh"
    id: PV_Energy_1
    device_class: energy
    #accuracy_decimals: 3
    state_class: total_increasing


  ### PV-Zaehler 2 Sensor-Werte
  - platform: template
    name: "Inverter 2 State"
    id: inv_2_state
    #unit_of_measurement: ""
    accuracy_decimals: 0
    icon: "mdi:numeric"
    entity_category: "diagnostic"
  - platform: template
    name: "Inverter 2 Generator Voltage"
    id: inv_2_generator_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    icon: "mdi:flash"
    device_class: voltage
    state_class: measurement
  - platform: template
    name: "Inverter 2 Generator Current"
    id: inv_2_generator_current
    unit_of_measurement: "A"
    accuracy_decimals: 2
    icon: "mdi:flash"
    device_class: current
    state_class: measurement
  - platform: template
    name: "Inverter 2 Generator Power"
    id: inv_2_generator_power
    unit_of_measurement: "W"
    accuracy_decimals: 0
    icon: "mdi:flash"
    device_class: power
    state_class: measurement
  - platform: template
    name: "Inverter 2 Grid Voltage"
    id: inv_2_grid_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    icon: "mdi:flash"
    device_class: voltage
    state_class: measurement
  - platform: template
    name: "Inverter 2 Grid Current"
    id: inv_2_grid_current
    unit_of_measurement: "A"
    accuracy_decimals: 2
    icon: "mdi:flash"
    device_class: current
    state_class: measurement
  - platform: template
    name: "Inverter 2 Supplied Power"
    id: inv_2_supplied_power
    unit_of_measurement: "W"
    accuracy_decimals: 0
    icon: "mdi:flash"
    device_class: power
    state_class: measurement
  - platform: template
    name: "Inverter 2 Device Temperature"
    id: inv_2_device_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    icon: "mdi:thermometer"
    device_class: temperature
    state_class: measurement
  - platform: template
    name: "Inverter 2 Daily Energy"
    id: inv_2_daily_energy
    unit_of_measurement: "Wh"
    accuracy_decimals: 0
    icon: "mdi:flash"
    device_class: energy
    state_class: total_increasing
  - platform: template
    name: "Inverter 2 Efficiency"
    id: inv_2_efficiency
    unit_of_measurement: '%'
    lambda: |-
      if (id(inv_2_supplied_power).state == 0.0 || id(inv_2_generator_power).state == 0.0) {
        return {};
      } else {
        return (id(inv_2_supplied_power).state / id(inv_2_generator_power).state) * 100.0;
      }

  ### Ersatz für bisherigen Pulse Counter Sensor
  - platform: template
    name: "PV-Energy 2"
    unit_of_measurement: "Wh"
    id: PV_Energy_2
    device_class: energy
    #accuracy_decimals: 3
    state_class: total_increasing


#### SWITCH ######################################################
switch:
  # Neustart des ESP8266
  - platform: restart
    name: "PV-Zaehler Restart"


#### BUTTON ######################################################
button:
  # request Data from PV-Inverter via RS485 from Address #1
  - platform: template
    id: pvz_inverter_1_data
    name: "PVZ Inverter 1 Data"
    icon: "mdi:chart-bar"
    on_press:
      if: 
        condition: ## Check if RS485 Write command is ongoing
          binary_sensor.is_off: rs485_write
        then:
        - logger.log: "RS485 Write Inverter 1"
        - binary_sensor.template.publish:
            id: rs485_write
            state: ON
        - uart.write:
            id: pvz_rs485_uart
            data: "#010\r"
        ## Wait minimum 1 sec between the commands to the Inverters
        - logger.log: "Button 1 Delay 1.5 sec"
        - delay: 1.5sec
        - binary_sensor.template.publish:
            id: rs485_write
            state: OFF
        else:
        - logger.log: "Other RS485 Write is ongoing"     

  # request Data from PV-Inverter via RS485 from Address #2
  - platform: template
    id: pvz_inverter_2_data
    name: "PVZ Inverter 2 Data"
    icon: "mdi:chart-bar"
    on_press:
      if: 
        condition: ## Check if RS485 Write command is ongoing
          binary_sensor.is_off: rs485_write
        then:
        - logger.log: "RS485 Write Inverter 2"
        - binary_sensor.template.publish:
            id: rs485_write
            state: ON
        - uart.write:
            id: pvz_rs485_uart
            data: "#020\r"
        ## Wait minimum 1 sec between the commands to the Inverters
        - logger.log: "Button 2 Delay 1.5 sec"
        - delay: 1.5sec
        - binary_sensor.template.publish:
            id: rs485_write
            state: OFF
        else:
        - logger.log: "Other RS485 Write is ongoing"          



#### TEXT SENSOR #################################################
text_sensor:
  - platform: version
    name: Sensor PV-Zaehler ESPHome Version
  # Local WiFi Info as Text-Sensor
  - platform: wifi_info
    ip_address:
      name: PVZ IP Address
    ssid:
      name: PVZ Connected SSID
    bssid:
      name: PVZ Connected BSSID
    mac_address:
      name: PVZ Mac Wifi Address
    scan_results:
      name: PVZ Scan Results


  ### PV-Zaehler-Sensor-Texte
  - platform: template
    name: "Inverter 1 ID"
    id: inv_1_device_id
    icon: "mdi:text"
  - platform: template
    name: "Inverter 1 Bezeichnung"
    id: inv_1_bezeichnung
    icon: "mdi:text"
  - platform: template
    name: "Inverter 1 Zustand"
    id: inv_1_zustand
    icon: "mdi:state-machine"
    entity_category: "diagnostic"

  - platform: template
    name: "Inverter 2 ID"
    id: inv_2_device_id
    icon: "mdi:text"
  - platform: template
    name: "Inverter 2 Bezeichnung"
    id: inv_2_bezeichnung
    icon: "mdi:text"
  - platform: template
    name: "Inverter 2 Zustand"
    id: inv_2_zustand
    icon: "mdi:state-machine"
    entity_category: "diagnostic"


  #- platform: custom
  #  lambda: |-
  #    auto my_custom_sensor = new UartReadLineSensor(id(pvz_rs485_uart));
  #    App.register_component(my_custom_sensor);
  #    return {my_custom_sensor};
  #  text_sensors:

  - platform: template
    id: "rawString"
    name: "Raw String"
    internal: true
    on_value:
      then:
        - lambda: |-
            String data = id(rawString).state.c_str();
            if (data.startsWith("*")) {
              String deviceId = "?000";
              int state = 0;
              float generatorVoltage = 0;  // Convert to integer with unit V
              float generatorCurrent = 0;  // Convert to integer with unit A
              int generatorPower = 0;  // Convert to integer with unit W
              float gridVoltage = 0;  // Convert to integer with unit V
              float gridCurrent = 0;  // Convert to integer with unit A
              int suppliedPower = 0;  // Convert to integer with unit W
              float deviceTemperature = 0;  // Convert to integer with unit °C
              int dailyEnergy = 0;  // Convert to integer with unit Wh
              String parityByte = "0";
              String InvDeviceName = "------";
              String ZustandText = "-                                                           ";

              sscanf(data.c_str(),"%s %i %f %f %i %f %f %i %f %i %9s %s", &deviceId, &state, &generatorVoltage, &generatorCurrent, &generatorPower, &gridVoltage, &gridCurrent, &suppliedPower, &deviceTemperature, &dailyEnergy, &parityByte, &InvDeviceName);

              switch (state) {
                case 0: ZustandText = "Wechselrichter hat sich gerade eingeschaltet";
                  break;
                case 1: ZustandText = "Warten auf Start";
                  break;
                case 2: ZustandText = "Warten auf Ausschalten";
                  break;
                case 3: ZustandText = "Konstantspannungsregler";
                  break;
                case 4: ZustandText = "MPP-Regler, ständige Suchbewegung";
                  break;
                case 5: ZustandText = "MPP-Regler, ohne Suchbewegung";
                  break;
                case 6: ZustandText = "Wartemodus vor Einspeisung, Netz- und Solarspannung testen";
                  break;
                case 7: ZustandText = "Wartemodus vor Selbsttest, Netz- und Solarspannung testen";
                  break;
                case 8: ZustandText = "Selbsttest der Relais";
                  break;
                case 10: ZustandText = "Übertemperaturabschaltung";
                  break;
                case 11: ZustandText = "Leistungsbegrenzung";
                  break;
                case 12: ZustandText = "Überlastabschaltung";
                  break;
                case 13: ZustandText = "Überspannungsabschaltung";
                  break;
                case 14: ZustandText = "Netzstörung (3-phasige Überwachung)";
                  break;
                case 15: ZustandText = "Übergang zur Nachtabschaltung";
                  break;
                case 18: ZustandText = "RCD Typ B-Abschaltung";
                  break;
                case 19: ZustandText = "Isolationswiderstand zu gering";
                  break;
                case 30: ZustandText = "Störung Messwandler";
                  break;
                case 31: ZustandText = "Fehler RCD Typ B-Modul";
                  break;
                case 32: ZustandText = "Fehler Selbsttest";
                  break;
                case 33: ZustandText = "Fehler DC-Einspeisung";
                  break;
                case 34: ZustandText = "Fehler Kommunikation";
                  break;
                default: ZustandText = "Undefiniert";
                  break;
              }

              if (data.startsWith("*010")) {
                id(inv_1_device_id).publish_state(deviceId.c_str());
                id(inv_1_state).publish_state(state);
                id(inv_1_zustand).publish_state(ZustandText.c_str());
                id(inv_1_generator_voltage).publish_state(generatorVoltage);
                id(inv_1_generator_current).publish_state(generatorCurrent);
                id(inv_1_generator_power).publish_state(generatorPower);
                id(inv_1_grid_voltage).publish_state(gridVoltage);
                id(inv_1_grid_current).publish_state(gridCurrent);
                id(inv_1_supplied_power).publish_state(suppliedPower);
                id(inv_1_device_temperature).publish_state(deviceTemperature);
                id(inv_1_daily_energy).publish_state(dailyEnergy);
                id(PV_Energy_1).publish_state(dailyEnergy);
                id(inv_1_bezeichnung).publish_state(InvDeviceName.c_str());
              }
              if (data.startsWith("*020")) {
                id(inv_2_device_id).publish_state(deviceId.c_str());
                id(inv_2_state).publish_state(state);
                id(inv_2_zustand).publish_state(ZustandText.c_str());
                id(inv_2_generator_voltage).publish_state(generatorVoltage);
                id(inv_2_generator_current).publish_state(generatorCurrent);
                id(inv_2_generator_power).publish_state(generatorPower);
                id(inv_2_grid_voltage).publish_state(gridVoltage);
                id(inv_2_grid_current).publish_state(gridCurrent);
                id(inv_2_supplied_power).publish_state(suppliedPower);
                id(inv_2_device_temperature).publish_state(deviceTemperature);
                id(inv_2_daily_energy).publish_state(dailyEnergy);
                id(PV_Energy_2).publish_state(dailyEnergy);
                id(inv_2_bezeichnung).publish_state(InvDeviceName.c_str());
              }
            }
  

#### TIME SETUP ##################################################
time:
  - platform: sntp
    # Reset Energy Counters Every Midnight
    on_time:
      # Every morning on weekdays
      - seconds: 59
        minutes: 59
        hours: 23
        then:
        - pulse_meter.set_total_pulses:
            id: PV_pulse_1
            value: 0
        - pulse_meter.set_total_pulses:
            id: PV_pulse_2
            value: 0


#### END #########################################################
